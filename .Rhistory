chi1 <- chisq.test(eyes, p=c(.41,.32,.15,.12))
HairEyeColor
eyes <- margin.table(HairEyeColor,2)
chi1 <- chisq.test(eyes)
chi2 <- chisq.test(eyes, p=c(.41,.32,.15,.12))
chi2
chi1
chi2
data_dir <- 'y:/hpe/'
# train data - used to train the model
train <<- read.csv(paste(data_dir,'analise_1529_1.csv',sep=''))
train
df <- train[2:5]
df
browser
View(df)
df <- train[2:4]
library(sunburstR)
library(dplyr)
library(tidyr)
df %>%
unite(bv, browser, version, sep = "-") %>%
select(bv, share) %>%
sunburst(., count = TRUE)
install.packages("sunburstR", dependencies=TRUE)
help(sunburstR)
devtools::install_github("timelyportfolio/sunburstR")
install.packages("devtools", dependencies=TRUE)
devtools::install_github("timelyportfolio/sunburstR")
install.packages("d3r", dependencies=TRUE)
library(sunburstR)
# read in sample visit-sequences.csv data provided in source
# https://gist.github.com/kerryrodden/7090426#file-visit-sequences-csv
sequences <- read.csv(
paste(data_dir,'analise_1529_2.csv')
,header=F
,stringsAsFactors = FALSE
)
data_dir <- 'y:/hpe/'
sequences <- read.csv(
paste(data_dir,'analise_1529_2.csv')
,header=F
,stringsAsFactors = FALSE
)
sequences <- read.csv(
paste(data_dir,'analise_1529_2.csv')
,header=F
,stringsAsFactors = FALSE
,sep=""
)
sequences <- read.csv(
paste(data_dir,'analise_1529_2.csv',sep="")
,header=F
,stringsAsFactors = FALSE
)
sequences
sequences <- sequences[1,3]
sequences
sequences <- read.csv(
paste(data_dir,'analise_1529_2.csv',sep="")
,header=F
,stringsAsFactors = FALSE
)
sequences <- sequences[1:1,3:3]
sequences <- read.csv(
paste(data_dir,'analise_1529_2.csv',sep="")
,header=F
,stringsAsFactors = FALSE
)
sunburst(sequences)
sunburst(sequences
,valueField=V2)
sunburst(sequences
,valueField="V2")
sequences
sunburst(sequences
,valueField="V3")
sunburst(sequences)
sunburst(sequences
,count=true)
sunburst(sequences
,count=TRUE)
sunburst(sequences
,count=TRUE)
sunburst(sequences
,percent = TRUE
,count = TRUE)
sunburst(sequences
,percent = TRUE
,count = TRUE
,legend(w=10,h=10))
sunburst(sequences
,percent = TRUE
,count = TRUE
,legend(w=0,h=10))
sunburst(sequences
,percent = TRUE
,count = TRUE
,legend(10,10))
sunburst(sequences
,percent = TRUE
,count = TRUE
,legend(10,10))
sunburst(sequences
,percent = TRUE
,count = TRUE
,legend=(10,10))
sunburst(sequences
,percent = TRUE
,count = TRUE
,legend=(w=10,10))
sunburst(sequences
,percent = TRUE
,count = TRUE
,legend=(w=10,h=10))
sunburst(sequences
,percent = TRUE
,count = TRUE
,legend = (w=10,h=10))
sunburst(sequences
,percent = TRUE
,count = TRUE
,legend = (w = 10,h = 10))
sunburst(sequences
,percent = TRUE
,count = TRUE
,legend = (w = 10 , h = 10))
sunburst(sequences
,percent = TRUE
,count = TRUE
,legend=(10,10))
sunburst(sequences
,percent = TRUE
,count = TRUE
,legend=(w=10,h=10))
sunburst(sequences
,percent = TRUE
,count = TRUE
,legend=(w=10))
sunburst(sequences
,percent = TRUE
,count = TRUE
,legend=(w=50))
sunburst(sequences
,percent = TRUE
,count = TRUE
,legend=(w=100))
sunburst(sequences
,percent = TRUE
,count = TRUE
,legend=(w=300))
sunburst(sequences
,percent = TRUE
,count = TRUE
,legend=(300))
sunburst(sequences
,percent = TRUE
,count = TRUE)
sunburst(sequences
,percent = TRUE
,count = TRUE
,legend=(w=300))
legendSize <- list(100)
sunburst(sequences
,percent = TRUE
,count = TRUE
,legend=legendSize)
legendSize <- list(200)
sunburst(sequences
,percent = TRUE
,count = TRUE
,legend=legendSize)
legendSize <- list(w=200)
legendSize <- list(w=200)
sunburst(sequences
,percent = TRUE
,count = TRUE
,legend=legendSize)
legendSize <- list(w=180)
sunburst(sequences
,percent = TRUE
,count = TRUE
,legend=legendSize)
# Bloco: Business Intelligence e Big Data Analytics: Valor
# Disciplina: Big Data Analytics com R
# Analysis Phase
#clear environment
rm(list=ls())
#clear Console = ctrl+l
# SET THE HOME DIR FOR WINDOWS OR LINUX ENVIRONMENTS
homeDir='C:/Users/Carlos/Documents/MEGAsync/MIT/Modulo_A_Valor/Atual/infnet_moduloA/'
#homeDir='/home/carlos/MEGAsync/MIT/Modulo_A_Valor/Atual/infnet_moduloA/'
setwd(homeDir)
source('functions/fn_load_data.R') # calculate prediction metrics
source('functions/fn_check_missing_data.R') # check for missing data
load_data()
library(dplyr) # bind rows
source('~/MEGAsync/MIT/Modulo_A_Valor/Atual/infnet_moduloA/analyze_data.R', echo=TRUE)
# check for missing data
check_missing_data(full)
STG <- subset(descr, Attribute == "STG", select=c(Description),1)
SCG <- subset(descr, Attribute == "SCG", select=c(Description),1)
STR <- subset(descr, Attribute == "STR", select=c(Description),1)
LPR <- subset(descr, Attribute == "LPR", select=c(Description),1)
PEG <- subset(descr, Attribute == "PEG", select=c(Description),1)
UNS <- subset(descr, Attribute == "UNS", select=c(Description),1)
# create a unique dataframe with the count of distinct values for each column
unique <- apply(full, 2, function(x)length(unique(x)))
uniqueDf <- cbind(read.table(text = names(unique)), unique)
my_bar=barplot(uniqueDf$unique , border=F , names.arg=uniqueDf$V1 , las=2 , col=brewer.pal(6,"Accent") , ylim=c(0,125) , main="" )
abline(v=c(6.1) , col="grey")
# Add the text
text(my_bar, uniqueDf$unique+4.04 , paste("n = ",uniqueDf$unique,sep="") ,cex=1)
# Closes the graphics file
